#begin exprexsion
Return,Paren,Property,Index,Call,CallN,Negate,Not,Multiply,Division,Mod,Plus,Subtract,Less,Greater,LessEq,GreaterEq,Equal,NotEqual,And,Or,List,ListN,Table,TableN
#end exprexsion

#begin define
statements := Return,If,IfElse,Define,Bind,Call,CallN
lvalue 	   := Property,Index
rvalue 	   := Paren,Property,Index,Call,CallN,Negate,Not,Multiply,Division,Mod,Plus,Subtract,Less,Greater,LessEq,GreaterEq,Equal,NotEqual,And,Or,List,ListN,Table,TableN
#end define

#begin syntax
Module 	   := <;is_stat;parser=$statements$;>
Define	   := keyword=local .. is_left;exp=Word .. op=<eq> .. is_right;parser=$rvalue$
Bind 	   := is_left;parser=$lvalue$ .. op=<eq> .. is_right;parser=$rvalue$
Return 	   := keyword=return .. is_right;parser=$rvalue$
If   	   := keyword=if .. is_right;parser=$rvalue$ .. keyword=then .. <;is_stat;parser=$statements$;> .. keyword=end
IfElse	   := keyword=if .. is_right;parser=$rvalue$ .. keyword=then .. <;is_stat;parser=$statements$;> .. keyword=else .. <;is_stat;parser=$statements$;> .. keyword=end
Paren	   := op=( .. is_right;parser=$rvalue$ .. op=)
Property   := is_right;parser=Paren .. op=. .. exp=Word
Index 	   := is_right;parser=Paren .. op=[ .. is_right;parser=$rvalue$ .. op=]
Call 	   := is_right;parser=[Paren,Property] .. op=( .. op=)
CallN 	   := is_right;parser=[Paren,Property] .. op=( .. <;is_right;parser=$rvalue$ .. op=,;> .. op=)
Negate 	   := op=- .. is_right;parser=[Paren,CallN]
Not    	   := keyword=not .. is_right;parser=[Paren,CallN]
Multiply   := is_right;parser=[Paren,Negate] .. op=* .. is_right;parser=[Paren,Negate]
Division   := is_right;parser=[Paren,Negate] .. op=/ .. is_right;parser=[Paren,Negate]
Mod		   := is_right;parser=[Paren,Negate] .. op=% .. is_right;parser=[Paren,Negate]
Plus 	   := is_right;parser=[Paren,Mod] .. op=+ .. is_right;parser=[Paren,Mod]
Subtract   := is_right;parser=[Paren,Mod] .. op=- .. is_right;parser=[Paren,Mod]
Less 	   := is_right;parser=[Paren,Subtract] .. op=< .. is_right;parser=[Paren,Subtract]
Greater    := is_right;parser=[Paren,Subtract] .. op=> .. is_right;parser=[Paren,Subtract]
LessEq	   := is_right;parser=[Paren,Subtract] .. op=< .. op=<eq> .. is_right;parser=[Paren,Subtract]
GreaterEq  := is_right;parser=[Paren,Subtract] .. op=> .. op=<eq> .. is_right;parser=[Paren,Subtract]
Equal	   := is_right;parser=[Paren,Subtract] .. op=<eq> .. op=<eq> .. is_right;parser=[Paren,Subtract]
NotEqual   := is_right;parser=[Paren,Subtract] .. op=~ .. op=<eq> .. is_right;parser=[Paren,Subtract]
And        := is_right;parser=[Paren,NotEqual] .. keyword=and .. is_right;parser=[Paren,NotEqual]
Or         := is_right;parser=[Paren,NotEqual] .. keyword=or .. is_right;parser=[Paren,NotEqual]
List 	   := op={ .. op=}
ListN 	   := op={ .. <;is_right;parser=$rvalue$ .. op=,;> .. op=}
Table 	   := op={ .. <;exp=Word .. op=<eq> .. is_right;parser=$rvalue$ .. op=,;> .. op=}
TableN 	   := op={ .. <;op=[ .. is_right;parser=$rvalue$ .. op=] .. op=<eq> .. is_right;parser=$rvalue$ .. op=,;> .. op=}
#end syntax
