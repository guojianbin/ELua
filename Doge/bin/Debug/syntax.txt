#begin exprexsion
ReturnN,Return,FunctionA,FunctionAN,Paren,Property,Index,Call,CallN,Concat,Negate,Not,Multiply,Division,Mod,Plus,Subtract,Less,Greater,LessEqual,GreaterEqual,Equal,NotEqual,And,Or,List,ListN,TableN,TableN2
#end exprexsion

#begin define
stats 		 := ReturnN,Return,Break,While,ForN,For,ForEach,Function,FunctionN,If,IfElse,Define,DefineN,Bind,BindN,Call,CallN
lvalue 	   	 := Property,Index
rvalue 	   	 := FunctionA,FunctionAN,Paren,Property,Index,Call,CallN,Concat,Negate,Not,Multiply,Division,Mod,Plus,Subtract,Less,Greater,LessEqual,GreaterEqual,Equal,NotEqual,And,Or,List,ListN,TableN,TableN2
#end define

#begin syntax
Module 	   	 := <;is_stat;parser=$stats$;>
Break 		 := keyword=break
While		 := keyword=while .. is_right;parser=$rvalue$ .. keyword=do .. <;is_stat;parser=$stats$;> .. keyword=end
ForN	   	 := keyword=for .. is_left;exp=Word .. op=<eq> .. is_right;parser=$rvalue$ .. op=, .. is_right;parser=$rvalue$ .. op=, .. is_right;parser=$rvalue$ .. keyword=do .. <;is_stat;parser=$stats$;> .. keyword=end
For	   		 := keyword=for .. is_left;exp=Word .. op=<eq> .. is_right;parser=$rvalue$ .. op=, .. is_right;parser=$rvalue$ .. keyword=do .. <;is_stat;parser=$stats$;> .. keyword=end
ForEach	  	 := keyword=for .. <;is_left;exp=Word .. op=,;> .. keyword=in .. <;is_right;parser=$rvalue$ .. op=,;> .. keyword=do .. <;is_stat;parser=$stats$;> .. keyword=end
Define	   	 := keyword=local .. is_left;exp=Word .. op=<eq> .. is_right;parser=$rvalue$
DefineN	   	 := keyword=local .. <;is_left;exp=Word .. op=,;> .. op=<eq> .. <;is_right;parser=$rvalue$ .. op=,;>
Bind 	   	 := is_left;parser=$lvalue$ .. op=<eq> .. is_right;parser=$rvalue$
BindN 	   	 := <;is_left;parser=$lvalue$ .. op=,;> .. op=<eq> .. <;is_right;parser=$rvalue$ .. op=,;>
ReturnN		 := keyword=return .. <;is_right;parser=$rvalue$ .. op=,;>
Return 	   	 := keyword=return
FunctionA 	 := keyword=function .. op=( .. op=) .. <;is_stat;parser=$stats$;> .. keyword=end
FunctionAN 	 := keyword=function .. op=( .. <;is_left;exp=Word .. op=,;> .. op=) .. <;is_stat;parser=$stats$;> .. keyword=end
Function 	 := keyword=function .. is_left;exp=Word .. op=( .. op=) .. <;is_stat;parser=$stats$;> .. keyword=end
FunctionN 	 := keyword=function .. is_left;exp=Word .. op=( .. <;is_left;exp=Word .. op=,;> .. op=) .. <;is_stat;parser=$stats$;> .. keyword=end
If   	   	 := keyword=if .. is_right;parser=$rvalue$ .. keyword=then .. <;is_stat;parser=$stats$;> .. keyword=end
IfElse	   	 := keyword=if .. is_right;parser=$rvalue$ .. keyword=then .. <;is_stat;parser=$stats$;> .. keyword=else .. <;is_stat;parser=$stats$;> .. keyword=end
Paren	   	 := op=( .. is_right;parser=$rvalue$ .. op=)
Property   	 := is_right;parser=Paren .. op=. .. exp=Word
Index 	   	 := is_right;parser=Paren .. op=[ .. is_right;parser=$rvalue$ .. op=]
Call 	   	 := is_right;parser=[Paren,Property] .. op=( .. op=)
CallN 	   	 := is_right;parser=[Paren,Property] .. op=( .. <;is_right;parser=$rvalue$ .. op=,;> .. op=)
Concat 	   	 := is_right;parser=[Paren,CallN] .. op=. .. op=. .. is_right;parser=[Paren,CallN]
Negate 	   	 := op=- .. is_right;parser=[Paren,CallN]
Not    	   	 := keyword=not .. is_right;parser=[Paren,CallN]
Multiply   	 := is_right;parser=[Paren,Negate] .. op=* .. is_right;parser=[Paren,Negate]
Division   	 := is_right;parser=[Paren,Negate] .. op=/ .. is_right;parser=[Paren,Negate]
Mod		   	 := is_right;parser=[Paren,Negate] .. op=% .. is_right;parser=[Paren,Negate]
Plus 	   	 := is_right;parser=[Paren,Mod] .. op=+ .. is_right;parser=[Paren,Mod]
Subtract   	 := is_right;parser=[Paren,Mod] .. op=- .. is_right;parser=[Paren,Mod]
Less 	   	 := is_right;parser=[Paren,Subtract] .. op=< .. is_right;parser=[Paren,Subtract]
Greater    	 := is_right;parser=[Paren,Subtract] .. op=> .. is_right;parser=[Paren,Subtract]
LessEqual	 := is_right;parser=[Paren,Subtract] .. op=< .. op=<eq> .. is_right;parser=[Paren,Subtract]
GreaterEqual := is_right;parser=[Paren,Subtract] .. op=> .. op=<eq> .. is_right;parser=[Paren,Subtract]
Equal	   	 := is_right;parser=[Paren,Subtract] .. op=<eq> .. op=<eq> .. is_right;parser=[Paren,Subtract]
NotEqual   	 := is_right;parser=[Paren,Subtract] .. op=~ .. op=<eq> .. is_right;parser=[Paren,Subtract]
And       	 := is_right;parser=[Paren,NotEqual] .. keyword=and .. is_right;parser=[Paren,NotEqual]
Or        	 := is_right;parser=[Paren,NotEqual] .. keyword=or .. is_right;parser=[Paren,NotEqual]
List 	   	 := op={ .. op=}
ListN 	   	 := op={ .. <;is_right;parser=$rvalue$ .. op=,;> .. op=}
TableN 	   	 := op={ .. <;exp=Word .. op=<eq> .. is_right;parser=$rvalue$ .. op=,;> .. op=}
TableN2 	 := op={ .. <;op=[ .. is_right;parser=$rvalue$ .. op=] .. op=<eq> .. is_right;parser=$rvalue$ .. op=,;> .. op=}
#end syntax
