parser_file == --[[
namespace ELua {

	/// <summary>
	/// @author Easily
	/// </summary>
	public static class $name$Parser {

		public static bool Parse(SyntaxContext context, int position) {
			var list = context.list;
			var offset = 0;
			var index = position;
			var count = 0;
			var isMissed = false;

$body$
		}

	}

}
]]

pool_file == --[[
using System.Collections.Generic;

namespace ELua {

    /// <summary>
    /// @author Easily
    /// </summary>
    public static class ParserPools {

$pool_list$
$get_parser$
$put_parser$
    }

}
]]

creator_file == --[[
using System.Collections.Generic;

namespace ELua {

    /// <summary>
    /// @author Easily
    /// </summary>
    public static class ExpressionCreator {

$func_list$

    }

}
]]

creator_func == --[[
		public static Expression Create$name$(List<Expression> list, int position, int len) {
			return new $name$Expression(list, position, len);
		}
]]

pool_list == --[[
        public static Queue<$name$Parser> $name$ParserPool = new Queue<$name$Parser>();
]]

get_parser == --[[
        public static $name$Parser Get$name$Parser() {
            if ($name$ParserPool.Count == 0) {
                return new $name$Parser();
            } else {
                return $name$ParserPool.Dequeue();
            }
        }
]]

put_parser == --[[
        public static void Put$name$Parser(IParser parser) {
            $name$ParserPool.Enqueue(($name$Parser)parser);
        }
]]

move_next == --[[
			offset += 1;
			index = position + offset;
]]

move_pre == --[[
offset -= 1;
]]

parser == --[[
			while ($name$Parser.Parse(context, index));
]]

pool_parser == --[[
			parser = ParserPools.Get$name$Parser();
			while (parser.Parse(context, index));
			ParserPools.Put$name$Parser(parser);
]]

exclude == --[[
			if (list[index].type == Expression.Type.$exp$) {
				return false;
			}
]]

exclude_exp == --[[
			if (list[index].type == Expression.Type.$exp$) {
				return false;
			}
]]

exclude_op == --[[
			if (ParserHelper.IsOperator(list[index], "$op$")) {
				return false;
			}
]]

if_else == --[[
			if ($cond$) {
$if_exp$
			} else {
$else_exp$
			}
]]

is_missed == --[[
				isMissed = true;
				context.isMissed = true;
]]

missed_back == --[[
			if (isMissed) {
				offset -= 1;
			}
]]

missed_break == --[[
			if (context.isMissed) {
				context.isMissed = false;
				offset += 1;
				index = position + offset;
				break;
			}
]]

missed_break2 == --[[
			if (context.isMissed) {
				context.isMissed = false;
				offset += 1;
				index = position + offset;
				count += 1;
				break;
			}
]]

ret_false == --[[
				return false;
]]

ignored == --[[
				// ignored
]]

break == --[[
				break;
]]

is_keyword == --[[
!ParserHelper.IsKeyword(list[index], "$keyword$")
]]

is_op == --[[
!ParserHelper.IsOperator(list[index], "$op$")
]]

is_exp == --[[
list[index].type != Expression.Type.$exp$
]]

is_stat == --[[
!list[index].isStatement
]]

is_left == --[[
!list[index].isLeftValue
]]

is_right == --[[
!list[index].isRightValue
]]

begin_loop == --[[
			while (true) {
]]

begin_loop2 == --[[
			count = 0;
			while (true) {
]]

end_loop == --[[
			}
]]

end_loop2 == --[[
			count += 1;
			}
			if (count == 0) {
				return false;
			}
]]

create_exp == --[[
			context.Insert(position, ExpressionCreator.Create$name$(list, position, offset));
			context.Remove(position + 1, offset);
]]

missed_ret == --[[
			if (isMissed) {
				return false;
			}
]]

ret_true == --[[
			return true;
]]
