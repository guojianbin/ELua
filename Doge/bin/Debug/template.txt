file == --[[
namespace ELua {

	/// <summary>
	/// @author Easily
	/// auto generated! don't modify !
	/// </summary>
	public static class $name$Parser {

		public static bool Parse(SyntaxContext context, int position) {
			var list = context.list;
			var offset = 0;
			var index = position;

$body$

			context.Insert(position, new $name$Expression(list, position, offset));
			context.Remove(position + 1, offset);
			return true;
		}

	}

}
]]

pool == --[[
using System.Collections.Generic;

namespace ELua {

    /// <summary>
    /// @author Easily
    /// auto generated! don't modify !
    /// </summary>
    public static class ParserPools {

$pool_list$
$get_parser$
$put_parser$
    }

}
]]

pool_list == --[[
        public static Queue<$name$Parser> $name$ParserPool = new Queue<$name$Parser>();
]]

get_parser == --[[
        public static $name$Parser Get$name$Parser() {
            if ($name$ParserPool.Count == 0) {
                return new $name$Parser();
            } else {
                return $name$ParserPool.Dequeue();
            }
        }
]]

put_parser == --[[
        public static void Put$name$Parser(IParser parser) {
            $name$ParserPool.Enqueue(($name$Parser)parser);
        }
]]

move_next == --[[
			offset += 1;
			index = position + offset;
]]

move_pre == --[[
			offset -= 1;
			index = position + offset;
]]

parser == --[[
			while ($name$Parser.Parse(context, index));
]]

pool_parser == --[[
			parser = ParserPools.Get$name$Parser();
			while (parser.Parse(context, index));
			ParserPools.Put$name$Parser(parser);
]]

is_keyword == --[[
			if (!ParserHelper.IsKeyword(list[index], "$keyword$")) {
				return false;
			}
]]

is_op == --[[
			if (!ParserHelper.IsOperator(list[index], "$op$")) {
				return false;
			}
]]

is_exp == --[[
			if (list[index].type != Expression.Type.$exp$) {
				return false;
			}
]]

is_stat == --[[
			if (!list[index].isStatement) {
				return false;
			}
]]

is_left == --[[
			if (!list[index].isLeftValue) {
				return false;
			}
]]

is_right == --[[
			if (!list[index].isRightValue) {
				return false;
			}
]]

begin_loop == --[[
			while (true) {
]]

end_loop == --[[
			}
]]
